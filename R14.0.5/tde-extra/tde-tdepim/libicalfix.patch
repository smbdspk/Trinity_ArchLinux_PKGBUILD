diff -Naur tdepim-orig/libkcal/vcalformat.cpp tdepim/libkcal/vcalformat.cpp
--- tdepim-orig/libkcal/vcalformat.cpp	2018-06-12 13:35:30.371819900 -0700
+++ tdepim/libkcal/vcalformat.cpp	2018-06-12 13:37:48.839447700 -0700
@@ -1338,10 +1338,10 @@
 int vcaltime_utc_offset( TQDateTime ictt, TQString tzid )
 {
   // libical-0.23 stuff:
-  //  struct icaltimetype tt = icaltime_from_timet( ictt.toTime_t(), false );
+  //  struct icaltimetype tt = icaltime_from_timet_with_zone ( ictt.toTime_t(), false, NULL );
   //  return icaltime_utc_offset( tt, tzid.latin1() );
   int daylight;
-  struct icaltimetype tt = icaltime_from_timet( ictt.toTime_t(), false );
+  struct icaltimetype tt = icaltime_from_timet_with_zone ( ictt.toTime_t(), false, NULL );
   //source says this is DEPRECATED, but it doesn't say what to use instead
   //how to handle failure from icaltimezone_get_builtin_timezone_from_tzid()?
   return icaltimezone_get_utc_offset(
diff -Naur tdepim-orig/libkcal/icalformatimpl.cpp tdepim/libkcal/icalformatimpl.cpp
--- tdepim-orig/libkcal/icalformatimpl.cpp      2018-06-12 13:35:30.372821500 -0700
+++ tdepim/libkcal/icalformatimpl.cpp   2018-06-12 13:46:42.790619200 -0700
@@ -1933,8 +1933,6 @@

   t.is_date = 1;

-  t.is_utc = 0;
-
   t.zone = 0;

   return t;
@@ -1954,7 +1952,6 @@

   t.is_date = 0;
   t.zone = icaltimezone_get_builtin_timezone ( mParent->timeZoneId().latin1() );
-  t.is_utc = 0;

  // _dumpIcaltime( t );
   /* The TQDateTime we get passed in is to be considered in the timezone of
@@ -1969,7 +1966,6 @@
       t.zone = tz;
       t = icaltime_convert_to_zone( t, utc );
     } else {
-      t.is_utc = 1;
       t.zone = utc;
     }
   }
@@ -1981,11 +1977,11 @@
 TQDateTime ICalFormatImpl::readICalDateTime( icalproperty *p, icaltimetype& t, icaltimezone* tz )
 {
 //   kdDebug(5800) << "ICalFormatImpl::readICalDateTime()" << endl;
-  if ( tz && t.is_utc == 0 ) { // Only use the TZ if time is not UTC.
+  if ( tz && icaltime_is_utc ( t ) == 0 ) { // Only use the TZ if time is not UTC.
     // FIXME: We'll need to make sure to apply the appropriate TZ, not just
     //        the first one found.
-    t.is_utc = (tz == icaltimezone_get_utc_timezone())?1:0;
-    if (t.is_utc == 0) {
+
+    if (icaltime_is_utc ( t ) == 0) {
         icalparameter *param = p ? icalproperty_get_first_parameter(p, ICAL_TZID_PARAMETER) : 0;
         const char *tzid = param ? icalparameter_get_tzid(param) : 0;
         if ( !tzid )
diff -Naur tdepim-orig/libkpimexchange/core/utils.cpp tdepim/libkpimexchange/core/utils.cpp
--- tdepim-orig/libkpimexchange/core/utils.cpp  2018-06-12 13:35:29.318821200 -0700
+++ tdepim/libkpimexchange/core/utils.cpp       2018-06-12 14:02:03.900997800 -0700
@@ -56,7 +56,7 @@
   TQDateTime epoch;
   epoch.setTime_t( 0 );
   time_t v = epoch.secsTo( utc );
-  struct icaltimetype tt = icaltime_from_timet( v, 0 ); // 0: is_date=false
+  struct icaltimetype tt = icaltime_from_timet_with_zone( v, 0, NULL ); // 0: is_date=false
   int offset = icaltimezone_get_utc_offset(
     icaltimezone_get_builtin_timezone( timeZoneId.latin1() ),
     &tt, &daylight );
@@ -72,7 +72,7 @@
   TQDateTime epoch;
   epoch.setTime_t( 0 );
   time_t v = epoch.secsTo( zone );
-  struct icaltimetype tt = icaltime_from_timet( v, 0 ); // 0: is_date=false
+  struct icaltimetype tt = icaltime_from_timet_with_zone( v, 0, NULL ); // 0: is_date=false
   int offset = icaltimezone_get_utc_offset(
     icaltimezone_get_builtin_timezone( timeZoneId.latin1() ),
     &tt, &daylight );
diff -Naur tdepim-orig/tderesources/lib/webdavhandler.cpp tdepim/tderesources/lib/webdav
handler.cpp
--- tdepim-orig/tderesources/lib/webdavhandler.cpp      2018-06-12 13:35:31.538957800 -0700
+++ tdepim/tderesources/lib/webdavhandler.cpp   2018-06-12 14:18:19.873963400 -0700
@@ -186,7 +186,7 @@
   TQDateTime epoch;
   epoch.setTime_t( 0 );
   time_t v = epoch.secsTo( zone );
-  struct icaltimetype tt = icaltime_from_timet( v, 0 ); // 0: is_date=false
+  struct icaltimetype tt = icaltime_from_timet_with_zone( v, 0, NULL ); // 0: is_date=false
   int offset = icaltimezone_get_utc_offset(
     icaltimezone_get_builtin_timezone( timeZoneId.latin1() ),
     &tt, &daylight );
     